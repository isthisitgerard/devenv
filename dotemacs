;;; dotemacs --- Fixing weird quirks and poor defaults

;; Author: Gerard Murphy
;; Borrowed from: Phil Hagelberg and Aaron Bedra

(add-to-list 'load-path "~/.emacs.d/")
(add-to-list 'load-path "~/.emacs.d/color-theme/")
(add-to-list 'load-path "~/.emacs.d/color-theme/themes")
(add-to-list 'load-path "~/.emacs.d/elpa")

(require 'package)
(add-to-list 'package-archives 
    '("MELPA" . "http://melpa.milkbox.net/packages/")
    '("marmalade" . "http://marmalade-repo.org/packages/")
)
(package-initialize)

(ido-mode t)
(setq ido-enable-flex-matching t)

;;(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

(autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
(setq-default save-place t)

(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-z") 'zap-up-to-char)

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(setq tab-width 4 indent-tabs-mode nil) 
(defalias 'yes-or-no-p 'y-or-n-p)
(mouse-wheel-mode t)
(line-number-mode 1)
(column-number-mode 1)
(setq scroll-step 1)
(setq x-select-enable-clipboard t
    x-select-enable-primary t
    save-interprogram-paste-before-kill t
    apropos-do-all t
    mouse-yank-at-point t
    require-final-newline t
    visible-bell t
    ediff-window-setup-function 'ediff-setup-windows-plain
    save-place-file (concat user-emacs-directory "places")
    )

(setq inhibit-splash-screen t
    initial-scratch-message nil
    initial-major-mode 'org-mode)

;; ===== Backup mode ===== 
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))
   delete-old-versions t
   kept-new-versions 10
   kept-old-versions 4
   version-control t)       ; use versioned backups

;; ===== Set the highlight current line minor mode ===== 
;;(global-hl-line-mode 1)

;; ===== Make Text mode the default mode for new buffers =====
(setq default-major-mode 'text-mode)

;; ===== Make Text mode the default mode for new buffersEnable CUA mode (windows copy/paste behaviour) =====
(cua-mode t)
(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(transient-mark-mode 1) ;; No region when it is not highlighted
(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour


;; ===== Custom C style =====
(setq c-default-style "linux" 
      c-basic-offset 4)

(require 'autopair)
(autopair-global-mode 1)
(setq autopair-autowrap t)


;; ===== Function to delete a line =====

;; First define a variable which will store the previous column position
(defvar previous-column nil "Save the column position")

;; Define the nuke-line function. The line is killed, then the newline
;; character is deleted. The column which the cursor was positioned at is then
;; restored. Because the kill-line function is used, the contents deleted can
;; be later restored by usibackward-delete-char-untabifyng the yank commands.
(defun nuke-line()
  "Kill an entire line, including the trailing newline character"
  (interactive)

  ;; Store the current column position, so it can later be restored for a more
  ;; natural feel to the deletion
  (setq previous-column (current-column))

  ;; Now move to the end of the current line
  (end-of-line)

  ;; Test the length of the line. If it is 0, there is no need for a
  ;; kill-line. All that happens in this case is that the new-line character
  ;; is deleted.
  (if (= (current-column) 0)
    (delete-char 1)

    ;; This is the 'else' clause. The current line being deleted is not zero
    ;; in length. First remove the line by moving to its start and then
    ;; killing, followed by deletion of the newline character, and then
    ;; finally restoration of the column position.
    (progn
      (beginning-of-line)
      (kill-line)
      (delete-char 1)
      (move-to-column previous-column))))

;; Now bind the delete line function to the F8 key
(global-set-key [f8] 'nuke-line)


;; Color theme
(load-theme 'misterioso)


;; ===== C/C++ IDE ===== 
;; http://tuhdo.github.io/c-ide.html
;; http://truongtx.me/2013/03/10/emacs-setting-up-perfect-environment-for-cc-programming/

;; helm
;; https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm.el
(require 'setup-helm)
(require 'helm-gtags)

(global-set-key (kbd "M-x") 'helm-M-x)

(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 )

;; Enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
(define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
(define-key helm-gtags-mode-map (kbd "C-c f") 'helm-gtags-find-files)

;; Speedbar
(global-set-key (kbd "M-s s") 'sr-speedbar-toggle)


(require 'cc-mode)
(require 'semantic)

(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)

(semantic-mode 1)


(require 'function-args)
(fa-config-default)
;(define-key c-mode-map  [(contrl tab)] 'moo-complete)
;(define-key c++-mode-map  [(control tab)] 'moo-complete)
(define-key c-mode-map (kbd "M-o")  'fa-show)
(define-key c++-mode-map (kbd "M-o")  'fa-show)


;;(require 'company)
;;(add-hook 'after-init-hook 'global-company-mode)

;; ecb
;;(require 'ecb)

;;(custom-set-variables
;; '(ecb-options-version "2.40"))

